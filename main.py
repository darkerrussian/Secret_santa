import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.router import Router
import asyncio
import random

from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# Bot token
BOT_TOKEN = "7700083842:AAEGkhYngAIys11NmCM5ky3UPlgc_RnQbIU"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()  # –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä


groups = {}  # Stores group data

class Group:
    def __init__(self, admin_id):
        self.admin_id = admin_id
        self.members = []  # List of (user_id, name, wish)
        self.ready = False

class JoinGroup(StatesGroup):
    waiting_for_name = State()
    waiting_for_wish = State()

@router.message(Command(commands=["start", "help"]))
async def send_welcome(message: Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="register_group")
    keyboard.button(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", callback_data="join_group")
    keyboard.button(text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –°–∞–Ω—Ç", callback_data="start_santa")
    keyboard.button(text="–ú–æ–∏ –≥—Ä—É–ø–ø—ã (–∞–¥–º–∏–Ω)", callback_data="admin_groups")
    keyboard.button(text="–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="delete_group")
    keyboard.adjust(2)
    #await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.as_markup())

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –≤–≤–æ–¥–∞
    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –ú–µ–Ω—é")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
        ],
        resize_keyboard=True
    )

    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )
    await message.answer("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_keyboard)


@router.message(lambda message: message.text == "üìú –ú–µ–Ω—é")
async def menu_handler(message: Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="register_group")
    keyboard.button(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", callback_data="join_group")
    keyboard.button(text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –°–∞–Ω—Ç", callback_data="start_santa")
    keyboard.button(text="–ú–æ–∏ –≥—Ä—É–ø–ø—ã (–∞–¥–º–∏–Ω)", callback_data="admin_groups")
    keyboard.button(text="–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="delete_group")
    keyboard.adjust(2)

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.as_markup())



@router.callback_query(lambda c: c.data == "register_group")
async def register_group(callback: CallbackQuery):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    if callback.message.chat.id in groups:
        await callback.message.answer("–ì—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        return

    group_id = str(random.randint(1000, 9999))
    groups[group_id] = Group(admin_id=callback.from_user.id)
    logging.info(f"–ì—Ä—É–ø–ø–∞ {group_id} —Å–æ–∑–¥–∞–Ω–∞. –¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã: {groups}")

    await callback.message.answer(
        f"–ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: {group_id}\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–Ω–æ–ø–∫–æ–π '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ'")

@router.callback_query(lambda c: c.data == "join_group")
async def join_group_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:")
    await state.set_state(JoinGroup.waiting_for_name)


@router.message(StateFilter(JoinGroup.waiting_for_name))
async def handle_group_id(message: Message, state: FSMContext):
    group_id = message.text.strip()
    if group_id not in groups:
        await message.reply("–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    group = groups[group_id]
    if group.ready:
        await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return

    await state.update_data(group_id=group_id)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(JoinGroup.waiting_for_wish)


@router.message(StateFilter(JoinGroup.waiting_for_wish))
async def handle_name_and_wish(message: Message, state: FSMContext):
    user_data = await state.get_data()
    group_id = user_data["group_id"]
    group = groups[group_id]

    # –ï—Å–ª–∏ –∏–º—è –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ, –æ–∂–∏–¥–∞–µ–º –µ–≥–æ –≤–≤–æ–¥–∞
    if "name" not in user_data:
        name = message.text.strip()
        if not name:
            await message.reply("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            return
        await state.update_data(name=name)
        await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–•–æ—á—É –∫–Ω–∏–≥—É'):")
        return

    # –ï—Å–ª–∏ –∏–º—è –∑–∞–¥–∞–Ω–æ, –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏—è
    wish = message.text.strip()
    if not wish:
        await message.reply("–ü–æ–∂–µ–ª–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ:")
        return

    name = user_data["name"]
    group.members.append((message.from_user.id, name, wish))
    await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ {group_id}!\n–í–∞—à–µ –∏–º—è: {name}\n–í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ: {wish}")
    await state.clear()


@router.message(StateFilter(JoinGroup.waiting_for_name))
async def handle_group_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID –≥—Ä—É–ø–ø—ã.
    """
    group_id = message.text.strip()
    if group_id not in groups:
        await message.reply("–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    group = groups[group_id]
    if group.ready:
        await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return

    await state.update_data(group_id=group_id)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(JoinGroup.waiting_for_name)


@router.callback_query(lambda c: c.data == "admin_groups")
async def admin_groups(callback: CallbackQuery):
    response = ""
    for group_id, group in groups.items():
        if group.admin_id == callback.from_user.id:
            response += f"ID –≥—Ä—É–ø–ø—ã: {group_id}\n"
    if not response:
        response = "–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω!"
    await callback.message.answer(response)

@router.callback_query(lambda c: c.data == "start_santa")
async def start_santa(callback: CallbackQuery):
    for group_id, group in groups.items():
        if group.admin_id == callback.from_user.id:
            if len(group.members) < 2:
                await callback.message.answer(f"–î–ª—è –≥—Ä—É–ø–ø—ã {group_id} –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
                continue

            random.shuffle(group.members)
            pairs = {group.members[i]: group.members[(i + 1) % len(group.members)] for i in range(len(group.members))}

            for user, recipient in pairs.items():
                recipient_name, recipient_wish = recipient[1], recipient[2]
                logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user[1]} –Ω–∞–∑–Ω–∞—á–µ–Ω –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –¥–ª—è {recipient_name}")
                await bot.send_message(user[0],
                                       f"–í—ã –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –¥–ª—è {recipient_name} ! –ï–≥–æ/–µ—ë –ø–æ–∂–µ–ª–∞–Ω–∏–µ: {recipient_wish}")

            group.ready = True
            await callback.message.answer(f"–¢–∞–π–Ω—ã–µ –°–∞–Ω—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}!")
            return

    await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã –∏–ª–∏ –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

@router.callback_query(lambda c: c.data == "delete_group")
async def delete_group_prompt(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:")

@router.message(lambda msg: True)
async def handle_delete_group(message: Message):
    group_id = message.text.strip()
    if group_id not in groups:
        await message.reply("–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    group = groups[group_id]
    if group.admin_id == message.from_user.id:
        groups.pop(group_id)
        await message.reply(f"–ì—Ä—É–ø–ø–∞ {group_id} —É–¥–∞–ª–µ–Ω–∞!")
        return

    await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É, –≥–¥–µ –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

async def main():
    dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    logging.info("–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

